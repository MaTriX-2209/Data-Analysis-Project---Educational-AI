# -*- coding: utf-8 -*-
"""Python Final Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SBYcpOlTSuvKHxlaKlpjvQAEZUANgnj-
"""

from google.colab import files
uploaded = files.upload()

"""CREATE TABLULAR FORMAT"""

import io
data = pd.read_csv('PythonCrewProject.csv')
data.head(16)

import pandas as pd

# Read the CSV file
data = pd.read_csv('PythonCrewProject.csv')

# Get the column names
column_names = data.columns.tolist()

# Print the column names
print("Column Names:")
for column in column_names:
    print(column)

import pandas as pd

# Replace 'filename.csv' with the name of your CSV file
data = pd.read_csv('PythonCrewProject.csv')

# Display the first few rows of the DataFrame
print(data.info())
print(data.head())

"""PANDAS Analysis (9)"""

import pandas as pd

# Load the data
data = pd.read_csv('PythonCrewProject.csv')

# 1. What is the average GPA of the students?

average_gpa = data['Q16.GPA'].mean()
print("The average GPA is:", average_gpa)

# 2. How many students have a GPA greater than 8?

students_with_gpa_gt_8 = data[data['Q16.GPA'] > 8].shape[0]
print("Number of students with GPA greater than 8:", students_with_gpa_gt_8)

# 3. What is the most common source of AI knowledge among the students?

most_common_ai_source = data['Q2.AI_sources'].mode()[0]
print("The most common source of AI knowledge is:", most_common_ai_source)

# 4. How many students are in each year of study?

students_per_year = data['Q13.Year_of_study'].value_counts()
print("Number of students in each year of study:\n", students_per_year)

# 5. What is the average AI knowledge score?

average_ai_knowledge = data['Q1.AI_knowledge'].mean()
print("The average AI knowledge score is:", average_ai_knowledge)

# 6. Calculate the percentage of students who have a GPA greater than 3.5.

students_with_gpa_gt_3_5 = data[data['Q16.GPA'] > 3.5].shape[0]
total_students = data.shape[0]
percentage = (students_with_gpa_gt_3_5 / total_students) * 100
print("Percentage of students with GPA greater than 3.5:", percentage)

# 7. How many students feel that AI could lead to dehumanization?

count_dehumanization_concern = (data['Q3#1.AI_dehumanization'] > 3).sum()
print(f"Number of students concerned about AI leading to dehumanization: {count_dehumanization_concern}")

# 8. What is the correlation between the utility grade of AI in education (Q7.Utility_grade) and students' GPA (Q16.GPA)?

correlation = data['Q7.Utility_grade'].corr(data['Q16.GPA'])
print(f"Correlation between the utility grade of AI and GPA: {correlation:.2f}")

# 9. Create a new column 'Grade' based on the GPA (Column2) where GPA >= 3.5 is 'A', GPA >= 3.0 is 'B', GPA >= 2.5 is 'C', and GPA < 2.5 is 'D'.

# Assuming you have a DataFrame called df with 'Column2' representing GPA
# Create a dictionary mapping GPA thresholds to grades
grade_mapping = {3.5: 'A', 3.0: 'B', 2.5: 'C'}

# Function to assign grades based on GPA
def assign_grade(gpa):
    for threshold, grade in grade_mapping.items():
        if gpa >= threshold:
            return grade
    return 'D'

# Create a new column 'Grade' and assign grades based on GPA
data['Grade'] = data['Q16.GPA'].apply(assign_grade)

# Display the DataFrame
print(data)

"""NUMPY Analysis (5)"""

import numpy as np
import pandas as pd

# Load the data
df = pd.read_csv('PythonCrewProject.csv')

# Example of converting a DataFrame column to a NumPy array
ai_knowledge = df['Q1.AI_knowledge'].values

# 10. What is the average AI knowledge rating among students?

# Calculate the average AI knowledge rating
average_ai_knowledge = np.mean(df['Q1.AI_knowledge'].values)
print(f"Average AI Knowledge Rating: {average_ai_knowledge:.2f}")

# 11. How many students rate the potential for AI to dehumanize as high (rating above 3)?

# Count high ratings for AI dehumanization
high_dehumanization = np.sum(df['Q3#1.AI_dehumanization'].values > 3)
print(f"Number of Students Concerned about AI Dehumanization: {high_dehumanization}")

# 12. What is the correlation between AI knowledge and the perceived utility of AI in education?

# Calculate correlation
correlation = np.corrcoef(df['Q1.AI_knowledge'].values, df['Q7.Utility_grade'].values)[0, 1]
print(f"Correlation between AI Knowledge and Utility Grade: {correlation:.2f}")

# 13. What percentage of students believe that AI can solve problems effectively (rating of 4 or 5 on problem-solving)?

# Calculate percentage believing in AI's problem-solving capabilities
effective_problem_solving = np.mean(df['Q3#3.Problem_solving'].values >= 4) * 100
print(f"Percentage of Students Believing in AI's Problem Solving: {effective_problem_solving:.2f}%")

# 14. What is the average GPA of students who do not inform themselves about AI (indicated by 'I don't inform myself about AI' in Q2.AI_sources)?

# Identify students who do not inform themselves about AI
no_ai_info = df['Q2.AI_sources'].apply(lambda x: "I don't inform myself about AI" in x).values
average_gpa_no_info = np.mean(df['Q16.GPA'][no_ai_info].values)
print(f"Average GPA of Students not Informing Themselves about AI: {average_gpa_no_info:.2f}")

"""MATPLOTLIB Analysis"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
data = pd.read_csv('PythonCrewProject.csv')

# 15. Plot a histogram of the GPA of the students.
plt.hist(data['Q16.GPA'], bins=10)
plt.xlabel('GPA')
plt.ylabel('Frequency')
plt.title('Histogram of GPA')
plt.show()

# 16. Plot a bar chart showing the count of students in each year of study.
students_per_year = data['Q13.Year_of_study'].value_counts()
plt.bar(students_per_year.index, students_per_year.values)
plt.xlabel('Year of Study')
plt.ylabel('Number of Students')
plt.title('Number of Students in Each Year of Study')
plt.show()

# 17. Plot a pie chart showing the distribution of AI knowledge sources.
ai_sources = data['Q2.AI_sources'].value_counts()
plt.pie(ai_sources.values, labels=ai_sources.index, autopct='%1.1f%%')
plt.title('Distribution of AI Knowledge Sources')
plt.show()

# 18. Plot a line graph showing the trend of 'Utility_grade' over the 'Year_of_study'.
utility_grade_per_year = data.groupby('Q13.Year_of_study')['Q15.Passed_exams'].mean()
plt.plot(utility_grade_per_year.index, utility_grade_per_year.values)
plt.xlabel('Year of Study')
plt.ylabel('Average Utility Grade')
plt.title('Trend of Utility Grade over Year of Study')
plt.show()

# 19. Plot a scatter plot between 'AI_knowledge' and 'GPA'.
plt.scatter(data['Q1.AI_knowledge'], data['Q16.GPA'])
plt.xlabel('AI Knowledge')
plt.ylabel('GPA')
plt.title('Scatter Plot of AI Knowledge vs. GPA')
plt.show()

# 20. Create a histogram that shows the distribution of students' AI knowledge rating.

plt.figure(figsize=(8, 5))
plt.hist(df['Q1.AI_knowledge'], bins=range(1, 12), edgecolor='black', alpha=0.7)
plt.title('Distribution of AI Knowledge Ratings')
plt.xlabel('AI Knowledge Rating')
plt.ylabel('Number of Students')
plt.xticks(range(1, 11))
plt.grid(True)
plt.show()

# 21. Create a pie chart to show the proportion of students by their year of study.

year_counts = df['Q13.Year_of_study'].value_counts()
plt.figure(figsize=(8, 5))
plt.pie(year_counts, labels=year_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Students by Year of Study')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

"""21 QUESTIONS DONE!"""